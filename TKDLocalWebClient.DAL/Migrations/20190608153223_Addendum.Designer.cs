// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TKDLocalWebClient.DAL;

namespace TKDLocalWebClient.DAL.Migrations
{
    [DbContext(typeof(TKDManagerDbContext))]
    [Migration("20190608153223_Addendum")]
    partial class Addendum
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TKDLocalWebClient.Model.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CurrentRound");

                    b.Property<bool>("IsFreestyle");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("Poomsae11ID");

                    b.Property<int?>("Poomsae12ID");

                    b.Property<int?>("Poomsae21ID");

                    b.Property<int?>("Poomsae22ID");

                    b.Property<int?>("Poomsae31ID");

                    b.Property<int?>("Poomsae32ID");

                    b.Property<int?>("PoomsaeID");

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Poomsae11ID");

                    b.HasIndex("Poomsae12ID");

                    b.HasIndex("Poomsae21ID");

                    b.HasIndex("Poomsae22ID");

                    b.HasIndex("Poomsae31ID");

                    b.HasIndex("Poomsae32ID");

                    b.HasIndex("PoomsaeID");

                    b.ToTable("Categories");

                    b.HasData(
                        new { ID = 1, IsFreestyle = false, Name = "Kadeti | <=5. geup | do 13 godina", ShortName = "KA-1" },
                        new { ID = 2, IsFreestyle = false, Name = "Kadetkinje | <=5. geup | do 13 godina", ShortName = "KB-1" },
                        new { ID = 3, IsFreestyle = false, Name = "Juniori | <=5. geup | 13 do 17 godina", ShortName = "JA-1" },
                        new { ID = 4, IsFreestyle = false, Name = "Juniorke | <=5. geup | 13 do 17 godina", ShortName = "JB-1" },
                        new { ID = 5, IsFreestyle = false, Name = "Seniori | <=5. geup | 18 do 30 godina", ShortName = "SA-1" },
                        new { ID = 6, IsFreestyle = false, Name = "Seniorke | <=5. geup | 18 do 30 godina", ShortName = "SB-1" },
                        new { ID = 7, IsFreestyle = false, Name = "Veterani | <=5. geup | od 30 godina", ShortName = "MA-1" },
                        new { ID = 8, IsFreestyle = false, Name = "Veteranke | <=5. geup | od 30 godina", ShortName = "MB-1" },
                        new { ID = 9, IsFreestyle = false, Name = "Invalidi M | Kognitivni invaliditet", ShortName = "PA-1" },
                        new { ID = 10, IsFreestyle = false, Name = "Invalidi Ž | Kognitivni invaliditet", ShortName = "PB-1" },
                        new { ID = 11, IsFreestyle = false, Name = "Parovi | <=5. geup", ShortName = "D-1" },
                        new { ID = 12, IsFreestyle = false, Name = "Timovi | <=5. geup", ShortName = "T-1" },
                        new { ID = 13, IsFreestyle = true, Name = "Freestyle M | <=5. geup", ShortName = "FA-1" },
                        new { ID = 14, IsFreestyle = true, Name = "Freestyle Ž | <=5. geup", ShortName = "FB-1" }
                    );
                });

            modelBuilder.Entity("TKDLocalWebClient.Model.Contestant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.Property<int>("TeamId");

                    b.Property<string>("TrackPath");

                    b.HasKey("ID");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TeamId");

                    b.ToTable("Contestants");
                });

            modelBuilder.Entity("TKDLocalWebClient.Model.Poomsae", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Ordinal")
                        .IsRequired();

                    b.Property<string>("PoomsaeType");

                    b.Property<int>("PoomsaeTypeId");

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("PoomsaeTypeId");

                    b.ToTable("Poomsaes");
                });

            modelBuilder.Entity("TKDLocalWebClient.Model.PoomsaeType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("PoomsaeTypes");

                    b.HasData(
                        new { ID = 1, Name = "Regular" },
                        new { ID = 2, Name = "Freestyle" },
                        new { ID = 3, Name = "FourDirections" }
                    );
                });

            modelBuilder.Entity("TKDLocalWebClient.Model.Score", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Accuracy1");

                    b.Property<double>("Accuracy2");

                    b.Property<double>("Accuracy3");

                    b.Property<double>("Accuracy4");

                    b.Property<double>("Accuracy5");

                    b.Property<double>("Accuracy6");

                    b.Property<double>("Accuracy7");

                    b.Property<double>("Accuracy8");

                    b.Property<double>("Accuracy9");

                    b.Property<double>("AccuracyGrandTotal");

                    b.Property<double>("AccuracyMinorTotal");

                    b.Property<int>("ContestantId");

                    b.Property<double>("GrandTotal");

                    b.Property<int>("Index");

                    b.Property<double>("MinorMean");

                    b.Property<double>("MinorTotal");

                    b.Property<double>("Presentation1");

                    b.Property<double>("Presentation2");

                    b.Property<double>("Presentation3");

                    b.Property<double>("Presentation4");

                    b.Property<double>("Presentation5");

                    b.Property<double>("Presentation6");

                    b.Property<double>("Presentation7");

                    b.Property<double>("Presentation8");

                    b.Property<double>("Presentation9");

                    b.Property<double>("PresentationGrandTotal");

                    b.Property<double>("PresentationMinorTotal");

                    b.Property<int>("Round");

                    b.HasKey("ID");

                    b.HasIndex("ContestantId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("TKDLocalWebClient.Model.Team", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TKDLocalWebClient.Model.Category", b =>
                {
                    b.HasOne("TKDLocalWebClient.Model.Poomsae", "Poomsae11")
                        .WithMany("Poomsae11s")
                        .HasForeignKey("Poomsae11ID");

                    b.HasOne("TKDLocalWebClient.Model.Poomsae", "Poomsae12")
                        .WithMany("Poomsae12s")
                        .HasForeignKey("Poomsae12ID");

                    b.HasOne("TKDLocalWebClient.Model.Poomsae", "Poomsae21")
                        .WithMany("Poomsae21s")
                        .HasForeignKey("Poomsae21ID");

                    b.HasOne("TKDLocalWebClient.Model.Poomsae", "Poomsae22")
                        .WithMany("Poomsae22s")
                        .HasForeignKey("Poomsae22ID");

                    b.HasOne("TKDLocalWebClient.Model.Poomsae", "Poomsae31")
                        .WithMany("Poomsae31s")
                        .HasForeignKey("Poomsae31ID");

                    b.HasOne("TKDLocalWebClient.Model.Poomsae", "Poomsae32")
                        .WithMany("Poomsae32s")
                        .HasForeignKey("Poomsae32ID");

                    b.HasOne("TKDLocalWebClient.Model.Poomsae")
                        .WithMany("Categories")
                        .HasForeignKey("PoomsaeID");
                });

            modelBuilder.Entity("TKDLocalWebClient.Model.Contestant", b =>
                {
                    b.HasOne("TKDLocalWebClient.Model.Category", "Category")
                        .WithMany("Contestants")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TKDLocalWebClient.Model.Team", "Team")
                        .WithMany("Contestants")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TKDLocalWebClient.Model.Poomsae", b =>
                {
                    b.HasOne("TKDLocalWebClient.Model.PoomsaeType")
                        .WithMany("Poomsaes")
                        .HasForeignKey("PoomsaeTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TKDLocalWebClient.Model.Score", b =>
                {
                    b.HasOne("TKDLocalWebClient.Model.Contestant", "Contestant")
                        .WithMany("Scores")
                        .HasForeignKey("ContestantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
